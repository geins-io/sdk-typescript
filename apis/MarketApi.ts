/* tslint:disable */
/* eslint-disable */
/**
 * Geins Management API
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EnvelopeMarketModelsMarket,
  MarketModelsMarket,
} from '../models';
import {
    EnvelopeMarketModelsMarketFromJSON,
    EnvelopeMarketModelsMarketToJSON,
    MarketModelsMarketFromJSON,
    MarketModelsMarketToJSON,
} from '../models';

export interface GetMarketByIdRequest {
    marketId: string;
    marketIdType?: GetMarketByIdMarketIdTypeEnum;
}

/**
 * 
 */
export class MarketApi extends runtime.BaseAPI {

    /**
     * Get a specific market
     */
    async getMarketByIdRaw(requestParameters: GetMarketByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnvelopeMarketModelsMarket>> {
        if (requestParameters.marketId === null || requestParameters.marketId === undefined) {
            throw new runtime.RequiredError('marketId','Required parameter requestParameters.marketId was null or undefined when calling getMarketById.');
        }

        const queryParameters: any = {};

        if (requestParameters.marketIdType !== undefined) {
            queryParameters['marketIdType'] = requestParameters.marketIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-apikey"] = this.configuration.apiKey("x-apikey"); // apiKey authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/API/Market/{marketId}`.replace(`{${"marketId"}}`, encodeURIComponent(String(requestParameters.marketId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvelopeMarketModelsMarketFromJSON(jsonValue));
    }

    /**
     * Get a specific market
     */
    async getMarketById(requestParameters: GetMarketByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnvelopeMarketModelsMarket> {
        const response = await this.getMarketByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of all markets
     */
    async listMarketsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketModelsMarket>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-apikey"] = this.configuration.apiKey("x-apikey"); // apiKey authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/API/Market/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarketModelsMarketFromJSON(jsonValue));
    }

    /**
     * Gets a list of all markets
     */
    async listMarkets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketModelsMarket> {
        const response = await this.listMarketsRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetMarketByIdMarketIdTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type GetMarketByIdMarketIdTypeEnum = typeof GetMarketByIdMarketIdTypeEnum[keyof typeof GetMarketByIdMarketIdTypeEnum];
