/* tslint:disable */
/* eslint-disable */
/**
 * Geins Management API
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A stock value for a product item
 * @export
 * @interface ProductModelsWriteProductItemStock
 */
export interface ProductModelsWriteProductItemStock {
    /**
     * A value to uniquely identity a single product item.
     * <remarks>This value can represent different fields, depending on configuration.</remarks>
     * @type {string}
     * @memberof ProductModelsWriteProductItemStock
     */
    id?: string;
    /**
     * The stock value.
     * @type {number}
     * @memberof ProductModelsWriteProductItemStock
     */
    stock?: number;
    /**
     * The sellable stock value.
     * <remarks>This value is read only.</remarks>
     * @type {number}
     * @memberof ProductModelsWriteProductItemStock
     */
    stockSellable?: number;
    /**
     * The type of stock to be updated. See {Product.Models.ProductItemStockType}
     * @type {number}
     * @memberof ProductModelsWriteProductItemStock
     */
    stockType?: ProductModelsWriteProductItemStockStockTypeEnum;
}


/**
 * @export
 */
export const ProductModelsWriteProductItemStockStockTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type ProductModelsWriteProductItemStockStockTypeEnum = typeof ProductModelsWriteProductItemStockStockTypeEnum[keyof typeof ProductModelsWriteProductItemStockStockTypeEnum];


/**
 * Check if a given object implements the ProductModelsWriteProductItemStock interface.
 */
export function instanceOfProductModelsWriteProductItemStock(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductModelsWriteProductItemStockFromJSON(json: any): ProductModelsWriteProductItemStock {
    return ProductModelsWriteProductItemStockFromJSONTyped(json, false);
}

export function ProductModelsWriteProductItemStockFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductModelsWriteProductItemStock {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'stock': !exists(json, 'Stock') ? undefined : json['Stock'],
        'stockSellable': !exists(json, 'StockSellable') ? undefined : json['StockSellable'],
        'stockType': !exists(json, 'StockType') ? undefined : json['StockType'],
    };
}

export function ProductModelsWriteProductItemStockToJSON(value?: ProductModelsWriteProductItemStock | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'Stock': value.stock,
        'StockSellable': value.stockSellable,
        'StockType': value.stockType,
    };
}

