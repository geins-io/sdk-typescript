/* tslint:disable */
/* eslint-disable */
/**
 * Geins Management API
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Data carrier for an address
 * @export
 * @interface OrderModelsAddress
 */
export interface OrderModelsAddress {
    /**
     * Company name
     * @type {string}
     * @memberof OrderModelsAddress
     */
    company?: string;
    /**
     * Care of. C/O
     * @type {string}
     * @memberof OrderModelsAddress
     */
    careOf?: string;
    /**
     * ISO code or name of the state, province or district
     * @type {string}
     * @memberof OrderModelsAddress
     */
    state?: string;
    /**
     * ISO code of the country
     * @type {string}
     * @memberof OrderModelsAddress
     */
    country?: string;
    /**
     * The first part(s) of the customer name
     * @type {string}
     * @memberof OrderModelsAddress
     */
    firstName?: string;
    /**
     * The last part(s), or family name of the customer
     * @type {string}
     * @memberof OrderModelsAddress
     */
    lastName?: string;
    /**
     * The email of the customer
     * @type {string}
     * @memberof OrderModelsAddress
     */
    email?: string;
    /**
     * The first line of the address, usually street and house number
     * @type {string}
     * @memberof OrderModelsAddress
     */
    addressLine1?: string;
    /**
     * The second line of the address.
     * @type {string}
     * @memberof OrderModelsAddress
     */
    addressLine2?: string;
    /**
     * The third line of the address.
     * @type {string}
     * @memberof OrderModelsAddress
     */
    addressLine3?: string;
    /**
     * The postal / zip code.
     * @type {string}
     * @memberof OrderModelsAddress
     */
    zip?: string;
    /**
     * The city.
     * @type {string}
     * @memberof OrderModelsAddress
     */
    city?: string;
    /**
     * The (land-line) phone number of the customer
     * @type {string}
     * @memberof OrderModelsAddress
     */
    phone?: string;
    /**
     * The SMS-capable number of the customer
     * @type {string}
     * @memberof OrderModelsAddress
     */
    mobile?: string;
    /**
     * The delivery address entry code, if needed for successful delivery
     * @type {string}
     * @memberof OrderModelsAddress
     */
    entryCode?: string;
}

/**
 * Check if a given object implements the OrderModelsAddress interface.
 */
export function instanceOfOrderModelsAddress(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderModelsAddressFromJSON(json: any): OrderModelsAddress {
    return OrderModelsAddressFromJSONTyped(json, false);
}

export function OrderModelsAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderModelsAddress {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'company': !exists(json, 'Company') ? undefined : json['Company'],
        'careOf': !exists(json, 'CareOf') ? undefined : json['CareOf'],
        'state': !exists(json, 'State') ? undefined : json['State'],
        'country': !exists(json, 'Country') ? undefined : json['Country'],
        'firstName': !exists(json, 'FirstName') ? undefined : json['FirstName'],
        'lastName': !exists(json, 'LastName') ? undefined : json['LastName'],
        'email': !exists(json, 'Email') ? undefined : json['Email'],
        'addressLine1': !exists(json, 'AddressLine1') ? undefined : json['AddressLine1'],
        'addressLine2': !exists(json, 'AddressLine2') ? undefined : json['AddressLine2'],
        'addressLine3': !exists(json, 'AddressLine3') ? undefined : json['AddressLine3'],
        'zip': !exists(json, 'Zip') ? undefined : json['Zip'],
        'city': !exists(json, 'City') ? undefined : json['City'],
        'phone': !exists(json, 'Phone') ? undefined : json['Phone'],
        'mobile': !exists(json, 'Mobile') ? undefined : json['Mobile'],
        'entryCode': !exists(json, 'EntryCode') ? undefined : json['EntryCode'],
    };
}

export function OrderModelsAddressToJSON(value?: OrderModelsAddress | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Company': value.company,
        'CareOf': value.careOf,
        'State': value.state,
        'Country': value.country,
        'FirstName': value.firstName,
        'LastName': value.lastName,
        'Email': value.email,
        'AddressLine1': value.addressLine1,
        'AddressLine2': value.addressLine2,
        'AddressLine3': value.addressLine3,
        'Zip': value.zip,
        'City': value.city,
        'Phone': value.phone,
        'Mobile': value.mobile,
        'EntryCode': value.entryCode,
    };
}

