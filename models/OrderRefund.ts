/* tslint:disable */
/* eslint-disable */
/**
 * Geins Management API
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrderRefundRow } from './OrderRefundRow';
import {
    OrderRefundRowFromJSON,
    OrderRefundRowFromJSONTyped,
    OrderRefundRowToJSON,
} from './OrderRefundRow';

/**
 * 
 * @export
 * @interface OrderRefund
 */
export interface OrderRefund {
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    refundId?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderRefund
     */
    refundInstanceId?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderRefund
     */
    orderId?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    externalOrderId?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    externalId?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    reference?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof OrderRefund
     */
    processedOn?: Date;
    /**
     * 
     * @type {number}
     * @memberof OrderRefund
     */
    refundedItemTotal?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderRefund
     */
    refundedShippingFee?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderRefund
     */
    refundedPaymentFee?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderRefund
     */
    refundedDiscount?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderRefund
     */
    refundedBalance?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderRefund
     */
    vatRate?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    paymentName?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    locale?: string;
    /**
     * 
     * @type {Array<OrderRefundRow>}
     * @memberof OrderRefund
     */
    rows?: Array<OrderRefundRow>;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    orderTransactionId?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    secondaryOrderTransactionId?: string;
}

/**
 * Check if a given object implements the OrderRefund interface.
 */
export function instanceOfOrderRefund(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderRefundFromJSON(json: any): OrderRefund {
    return OrderRefundFromJSONTyped(json, false);
}

export function OrderRefundFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderRefund {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'refundId': !exists(json, 'RefundId') ? undefined : json['RefundId'],
        'refundInstanceId': !exists(json, 'RefundInstanceId') ? undefined : json['RefundInstanceId'],
        'orderId': !exists(json, 'OrderId') ? undefined : json['OrderId'],
        'externalOrderId': !exists(json, 'ExternalOrderId') ? undefined : json['ExternalOrderId'],
        'externalId': !exists(json, 'ExternalId') ? undefined : json['ExternalId'],
        'reference': !exists(json, 'Reference') ? undefined : json['Reference'],
        'description': !exists(json, 'Description') ? undefined : json['Description'],
        'processedOn': !exists(json, 'ProcessedOn') ? undefined : (new Date(json['ProcessedOn'])),
        'refundedItemTotal': !exists(json, 'RefundedItemTotal') ? undefined : json['RefundedItemTotal'],
        'refundedShippingFee': !exists(json, 'RefundedShippingFee') ? undefined : json['RefundedShippingFee'],
        'refundedPaymentFee': !exists(json, 'RefundedPaymentFee') ? undefined : json['RefundedPaymentFee'],
        'refundedDiscount': !exists(json, 'RefundedDiscount') ? undefined : json['RefundedDiscount'],
        'refundedBalance': !exists(json, 'RefundedBalance') ? undefined : json['RefundedBalance'],
        'vatRate': !exists(json, 'VatRate') ? undefined : json['VatRate'],
        'paymentName': !exists(json, 'PaymentName') ? undefined : json['PaymentName'],
        'locale': !exists(json, 'Locale') ? undefined : json['Locale'],
        'rows': !exists(json, 'Rows') ? undefined : ((json['Rows'] as Array<any>).map(OrderRefundRowFromJSON)),
        'orderTransactionId': !exists(json, 'OrderTransactionId') ? undefined : json['OrderTransactionId'],
        'secondaryOrderTransactionId': !exists(json, 'SecondaryOrderTransactionId') ? undefined : json['SecondaryOrderTransactionId'],
    };
}

export function OrderRefundToJSON(value?: OrderRefund | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'RefundId': value.refundId,
        'RefundInstanceId': value.refundInstanceId,
        'OrderId': value.orderId,
        'ExternalOrderId': value.externalOrderId,
        'ExternalId': value.externalId,
        'Reference': value.reference,
        'Description': value.description,
        'ProcessedOn': value.processedOn === undefined ? undefined : (value.processedOn.toISOString()),
        'RefundedItemTotal': value.refundedItemTotal,
        'RefundedShippingFee': value.refundedShippingFee,
        'RefundedPaymentFee': value.refundedPaymentFee,
        'RefundedDiscount': value.refundedDiscount,
        'RefundedBalance': value.refundedBalance,
        'VatRate': value.vatRate,
        'PaymentName': value.paymentName,
        'Locale': value.locale,
        'Rows': value.rows === undefined ? undefined : ((value.rows as Array<any>).map(OrderRefundRowToJSON)),
        'OrderTransactionId': value.orderTransactionId,
        'SecondaryOrderTransactionId': value.secondaryOrderTransactionId,
    };
}

