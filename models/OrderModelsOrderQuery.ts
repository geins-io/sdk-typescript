/* tslint:disable */
/* eslint-disable */
/**
 * Geins Management API
 *  Geins Management API is an RESTful api to power your applications who manages your geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip With this API, you can build custom applications and integrate with third-party systems, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API key`. You can create as many API keys as you need. Each `API key` is connected to a specific account so you can keep track of operations and manage keys. You can find your `API key` in the `geins merchant center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are supported:   - `API Key`   - `Basic Auth` 
 *
 * The version of the OpenAPI document: v1.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Data carrying class for order queries
 * @export
 * @interface OrderModelsOrderQuery
 */
export interface OrderModelsOrderQuery {
    /**
     * Given a date, only orders updated after the provided date will be returned.
     * @type {Date}
     * @memberof OrderModelsOrderQuery
     */
    updated?: Date;
    /**
     * Comma separated list of statuses to filter on.
     * @type {string}
     * @memberof OrderModelsOrderQuery
     */
    statusList?: string;
    /**
     * Id of a market.
     * @type {number}
     * @memberof OrderModelsOrderQuery
     */
    marketId?: number;
    /**
     * Name of a payment method
     * @type {string}
     * @memberof OrderModelsOrderQuery
     */
    paymentName?: string;
    /**
     * Id of a parcel group.
     * @type {number}
     * @memberof OrderModelsOrderQuery
     */
    parcelGroupId?: number;
    /**
     * The ID of a customer
     * @type {number}
     * @memberof OrderModelsOrderQuery
     */
    customerId?: number;
    /**
     * The email of a customer
     * @type {string}
     * @memberof OrderModelsOrderQuery
     */
    email?: string;
    /**
     * Comma separated list of child-collections to also include in the query result.
     * @type {string}
     * @memberof OrderModelsOrderQuery
     */
    include?: string;
    /**
     * This status can be used by external systems to change the status of an order. Such as failed or done.
     * @type {number}
     * @memberof OrderModelsOrderQuery
     */
    externalOrderStatus?: number;
    /**
     * If true, will combine all order rows that are part of a container into a single container row.
     * @type {boolean}
     * @memberof OrderModelsOrderQuery
     */
    combineProductContainerRows?: boolean;
    /**
     * The packing place to get orders from.
     * @type {number}
     * @memberof OrderModelsOrderQuery
     */
    packingLocationId?: number;
}

/**
 * Check if a given object implements the OrderModelsOrderQuery interface.
 */
export function instanceOfOrderModelsOrderQuery(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderModelsOrderQueryFromJSON(json: any): OrderModelsOrderQuery {
    return OrderModelsOrderQueryFromJSONTyped(json, false);
}

export function OrderModelsOrderQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderModelsOrderQuery {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'updated': !exists(json, 'Updated') ? undefined : (new Date(json['Updated'])),
        'statusList': !exists(json, 'StatusList') ? undefined : json['StatusList'],
        'marketId': !exists(json, 'MarketId') ? undefined : json['MarketId'],
        'paymentName': !exists(json, 'PaymentName') ? undefined : json['PaymentName'],
        'parcelGroupId': !exists(json, 'ParcelGroupId') ? undefined : json['ParcelGroupId'],
        'customerId': !exists(json, 'CustomerId') ? undefined : json['CustomerId'],
        'email': !exists(json, 'Email') ? undefined : json['Email'],
        'include': !exists(json, 'Include') ? undefined : json['Include'],
        'externalOrderStatus': !exists(json, 'ExternalOrderStatus') ? undefined : json['ExternalOrderStatus'],
        'combineProductContainerRows': !exists(json, 'CombineProductContainerRows') ? undefined : json['CombineProductContainerRows'],
        'packingLocationId': !exists(json, 'PackingLocationId') ? undefined : json['PackingLocationId'],
    };
}

export function OrderModelsOrderQueryToJSON(value?: OrderModelsOrderQuery | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Updated': value.updated === undefined ? undefined : (value.updated.toISOString()),
        'StatusList': value.statusList,
        'MarketId': value.marketId,
        'PaymentName': value.paymentName,
        'ParcelGroupId': value.parcelGroupId,
        'CustomerId': value.customerId,
        'Email': value.email,
        'Include': value.include,
        'ExternalOrderStatus': value.externalOrderStatus,
        'CombineProductContainerRows': value.combineProductContainerRows,
        'PackingLocationId': value.packingLocationId,
    };
}

